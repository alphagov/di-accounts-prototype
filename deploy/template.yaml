AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: "Deploy the di-accounts-prototype"

Parameters:
  Environment:
    Description: The name of the environment to deploy to
    Type: String
    AllowedValues:
      - "dev"
    Default: dev
  VpcStackName:
    Description: The name of the stack that defines the VPC in which this container will run.
    Type: String
  ContainerPort:
    Description: The port on which the container is running
    Type: Number
    Default: "3000"
  ImageTag:
    Type: String
    Default: abc
  ApplicationName:
    Type: String
    Default: di-acc-prototype
  # DomainName:
  #   Type: String
  #   Default: account.prototype.dev.account.gov.uk
  SourceTagValue:
    Description: "Github respository for the prototype source template.yaml. See: https://gds-way.cloudapps.digital/manuals/aws-tagging.html"
    Type: String
    Default: alphagov/di-accounts-prototypedeploy/template.yaml
  OwnerTagValue:
    Description: "Identify the owner of the prototype using Tags.See: https://gds-way.cloudapps.digital/manuals/aws-tagging.html"
    Type: String
    Default: govuk-accounts-tech@digital.cabinet-office.gov.uk
  ProductTagValue:
    Description: "Identify the owner of the prototype using Tags, See: https://gds-way.cloudapps.digital/manuals/aws-tagging.html"
    Type: String
    Default: GOV.UK One Login
  SystemTagValue:
    Description: "Identify the system of the prototype using Tags.  See: https://gds-way.cloudapps.digital/manuals/aws-tagging.html"
    Type: String
    Default: Accounts

Resources:
  ContainerRepository:
    Type: AWS::ECR::Repository
    Properties:
      ImageTagMutability: IMMUTABLE
      RepositoryName: !Ref ApplicationName

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECSCluster"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref ApplicationName, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECSCluster"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref ApplicationName, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECSCluster"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue

  PrototypeServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        !Join ["-", [!Ref ApplicationName, PrototypeServiceSecurityGroup]]
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECSCluster"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue

  #
  # Fargate tasks
  #

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      Cpu: "256"
      Memory: "512"
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Ref ApplicationName
          Cpu: "256"
          Memory: "512"
          Image:
            !Join [
              "",
              [!GetAtt ContainerRepository.RepositoryUri, ":", !Ref ImageTag],
            ]
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Environment:
            - Name: NODE_ENV
              Value: production
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECSCluster"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue

  PrototypeService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref ApplicationName
      Cluster: !GetAtt ECSCluster.Arn
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 15
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets:
            - Fn::ImportValue:
                Fn::Sub: "${VpcStackName}-ProtectedSubnetIdA"
            - Fn::ImportValue:
                Fn::Sub: "${VpcStackName}-ProtectedSubnetIdB"
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ApplicationName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 6
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetType: ip
      Name: !Join ["-", [!Ref ApplicationName, TargetGroup]]
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: "forward"
      Conditions:
        - Field: path-pattern
          Values: ["*"]
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        !Join ["-", [!Ref ApplicationName, ContainerSecurityGroup]]
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        !Join ["-", [!Ref ApplicationName, LoadBalancerSecurityGroup]]
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ["-", [!Ref ApplicationName, LoadBalancer]]
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue:
            Fn::Sub: "${VpcStackName}-ProtectedSubnetIdA"
        - Fn::ImportValue:
            Fn::Sub: "${VpcStackName}-ProtectedSubnetIdB"
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECSCluster"
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # HTTPSLoadBalancerListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #       - TargetGroupArn: !Ref TargetGroup
  #         Type: forward
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Port: 443
  #     Protocol: HTTPS
  #     Certificates:
  #       - CertificateArn: !Ref HTTPSCertificate

  # HTTPSCertificate:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: !Ref DomainName
  #     DomainValidationOptions:
  #       - DomainName: !Ref DomainName
  #         HostedZoneId:
  #           Fn::ImportValue:
  #             Fn::Sub: "${VpcStackName}-PrototypeRoute53"
  #     ValidationMethod: DNS

  # DNSRecord:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     Name: !Ref DomainName
  #     ResourceRecords:
  #       - !GetAtt LoadBalancer.DNSName
  #     HostedZoneId:
  #       Fn::ImportValue:
  #         Fn::Sub: "${VpcStackName}-PrototypeRoute53"
  #     Type: CNAME
  #     TTL: 3000
